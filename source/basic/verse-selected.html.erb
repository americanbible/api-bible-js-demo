---
title: Bible API Example Application
---

<% content_for :subheader do %>
          <h2>Selected verse:</h2>
          <h3 id="viewing"><span id="verse"></span></h3><% end %>
      <div id="verse-content" class="verse-container"></div>
<% content_for :javascript do %>
    <script type="text/javascript" src="https://pkg.api.bible/fumsV3.min.js"></script>
    <script>
      /* This code ensures that FUMS will be reported correctly even if fumsV3.min.js has not finished loading before an attempt is made. */
      window.fumsData = window.fumsData || [];
      window.fums = window.fums || function () {
        window.fumsData.push(arguments);
      };
    </script>
    <script>
      const bibleVerseTitle = document.querySelector(`#verse`);
      const bibleVerseList = document.querySelector(`#verse-content`);
      const bibleVersionID = getParameterByName(`version`);
      const bibleVerseID = getParameterByName(`verse`);
      const abbreviation = getParameterByName(`abbr`);

      if (!bibleVersionID || !bibleVerseID) {
        window.location.href = `./index.html`;
      }

      getSelectedVerse(bibleVersionID, bibleVerseID).then(({ content, reference }) => {
        bibleVerseTitle.innerHTML = `<span><i>${reference}</i></span>`;
        bibleVerseList.innerHTML = `<div class="eb-container">${content}</div>`;
      });

      let [book, chapter, verse] = bibleVerseID.split(`.`);
      if (bibleVerseID.includes(`-`)) {
        verse = bibleVerseID.split(`-`).shift().split(`.`).pop() + `-` + bibleVerseID.split(`-`).pop().split(`.`).pop();
      }
      const breadcrumbsHTML = `
        <ul>
          <li><a href="book.html?version=${bibleVersionID}&abbr=${abbreviation}">${abbreviation}</a></li>
          <li><a href="chapter.html?version=${bibleVersionID}&abbr=${abbreviation}&book=${book}">${book}</a></li>
          <li><a href="verse.html?version=${bibleVersionID}&abbr=${abbreviation}&chapter=${book}.${chapter}">${chapter}</a></li>
          <li>${verse}</li>
        </ul>
      `;
      breadcrumbs.innerHTML = breadcrumbsHTML;

      /**
       * Gets selected verse from API.Bible
       * @param {string} bibleVersionID to get verse from
       * @param {string} bibleVerseID of selected verse
       * @returns {Promise} containing selected verse
       */
      function getSelectedVerse(bibleVersionID, bibleVerseID) {
        return new Promise((resolve, reject) => {
          const xhr = new XMLHttpRequest();
          xhr.withCredentials = false;

          xhr.addEventListener(`readystatechange`, function() {
            if (this.readyState === this.DONE) {
              const response = JSON.parse(this.responseText);
              const fumsToken = response.meta.fumsToken;
              const {content, reference} = response.data;
              const verse = {content, reference};

              fums(`trackview`,fumsToken);
              resolve(verse);
            }
          });

          xhr.open(`GET`, `https://v2.api.bible/bibles/${bibleVersionID}/verses/${bibleVerseID}?include-chapter-numbers=false&include-verse-numbers=false`);
          xhr.setRequestHeader(`api-key`, API_KEY);

          xhr.onerror = () => reject(xhr.statusText);

          xhr.send();
        });
      }

      /**
       * Gets book name from book ID
       * @param {string} bibleVersionID Bible ID
       * @param {string} bibleBookID book ID
       * @returns {string} name of book
       */
      function getBookNameFromID(bibleVersionID, bibleBookID) {
        return new Promise((resolve, reject) => {
          const xhr = new XMLHttpRequest();
          xhr.withCredentials = false;

          xhr.addEventListener(`readystatechange`, function() {
            if (this.readyState === this.DONE) {
              const {name} = JSON.parse(this.responseText).data;
              resolve(name);
            }
          });

          xhr.open(`GET`, `https://v2.api.bible/bibles/${bibleVersionID}/books/${bibleBookID}`);
          xhr.setRequestHeader(`api-key`, API_KEY);

          xhr.onerror = () => reject(xhr.statusText);

          xhr.send();
        });
      }

      /**
       * Gets query parameter from URL based on name
       * @param {string} name of query parameter
       * @returns {string} value of query parameter
       */
      function getParameterByName(name) {
        const url = window.location.href;
        name = name.replace(/[\[\]]/g, `\\$&`);
        const regex = new RegExp(`[?&]` + name + `(=([^&#]*)|&|#|$)`),
          results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return ``;
        return decodeURIComponent(results[2].replace(/\+/g, ` `));
      }

      /**
       * Loads page for new search
       */
      function searchButton(){
        const searchInput = document.querySelector(`#search-input`);
        window.location.href = `./search.html?&version=${bibleVersionID}&abbr=${abbreviation}&query=${searchInput.value}`;
      }
    </script>
<% end %>