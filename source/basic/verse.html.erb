---
title: Bible API Example Application
selectPrompt: Select a Verse
---

<% content_for :subheader do %>
          <h2>Viewing:</h2>
          <h3 id="viewing"></h3><% end %>
      <div id="verse-list" class="list-container numeric-list"></div>
      <div class="eb-container" id="chapter-text"></div>
<% content_for :javascript do %>

    <script type="text/javascript" src="https://pkg.api.bible/fumsV3.min.js"></script>
<script>
  /* This code ensures that FUMS will be reported correctly even if fumsV3.min.js has not finished loading before an attempt is made. */
  window.fumsData = window.fumsData || [];
  window.fums = window.fums || function () {
    window.fumsData.push(arguments);
  };
</script>
    <script>
      const bibleVerseList = document.querySelector(`#verse-list`);
      const chapterText = document.querySelector(`#chapter-text`);
      const bibleVersionID = getParameterByName(`version`);
      const bibleChapterID = getParameterByName(`chapter`);
      const abbreviation = getParameterByName(`abbr`);
      let verseHTML = ``;

      if (!bibleVersionID || !bibleChapterID) {
        window.location.href = `./index.html`;
      }

      getVerses(bibleVersionID, bibleChapterID).then((verseList) => {
        verseHTML += `<ol>`;
        for (let verse of verseList) {
          const verseNumber = getVerseNumber(verse.id);
          verseHTML += `<li class="grid"><a class="grid-link" href="verse-selected.html?version=${bibleVersionID}&abbr=${abbreviation}&verse=${verse.id}"> ${verseNumber} </a></li>`;
        }
        verseHTML += `</ol>`;
        bibleVerseList.innerHTML = verseHTML;
      });

      getChapterText(bibleChapterID).then((content) => {
        chapterText.innerHTML = content;
      });

      const [book, chapter] = bibleChapterID.split(`.`);
      const breadcrumbsHTML = `
        <ul>
          <li><a href="book.html?version=${bibleVersionID}&abbr=${abbreviation}">${abbreviation}</a></li>
          <li><a href="chapter.html?version=${bibleVersionID}&abbr=${abbreviation}&book=${book}">${book}</a></li>
          <li>${chapter}</li>
        </ul>
      `;
      breadcrumbs.innerHTML = breadcrumbsHTML;

      document.querySelector(`#viewing`).innerHTML = `${chapter}`;

      /**
       * Gets verses from API.Bible
       * @param {string} bibleVersionID to get verses from
       * @param {string} bibleChapterID to get verses from
       * @returns {Promise} containing list of verses from selected book
       */
      function getVerses(bibleVersionID, bibleChapterID) {
        return new Promise((resolve, reject) => {
          const xhr = new XMLHttpRequest();
          xhr.withCredentials = false;

          xhr.addEventListener(`readystatechange`, function() {
            if (this.readyState === this.DONE) {
              const {data} = JSON.parse(this.responseText);
              const verses = data.map( ({id}) => { return {id};} );

              resolve(verses);
            }
          });

          xhr.open(`GET`, `https://v2.api.bible/bibles/${bibleVersionID}/chapters/${bibleChapterID}/verses`);
          xhr.setRequestHeader(`api-key`, API_KEY);

          xhr.onerror = () => reject(xhr.statusText);

          xhr.send();
        });
      }

      /**
       * Gets chapter text from API.Bible
       * @param {string} bibleChapterID to get chapter text from
       * @returns {Promise} containing text from selected chapter
       */
      function getChapterText(bibleChapterID) {
        return new Promise((resolve, reject) => {
          const xhr = new XMLHttpRequest();
          xhr.withCredentials = false;

          xhr.addEventListener(`readystatechange`, function() {
            if (this.readyState === this.DONE) {
              const {data, meta} = JSON.parse(this.responseText);

              fums(`trackview`,meta.fumsToken);
              resolve(data.content);
            }
          });

          xhr.open(`GET`, `https://v2.api.bible/bibles/${bibleVersionID}/chapters/${bibleChapterID}`);
          xhr.setRequestHeader(`api-key`, API_KEY);

          xhr.onerror = () => reject(xhr.statusText);

          xhr.send();
        });
      }

      /**
       * Parses verse number from verseID
       * @param {string} verseID verse ID
       * @returns {string} verse number or numbers
       */
      function getVerseNumber(verseID) {
        let verseNumber;
        if (verseID.includes(`-`)) {
          verseNumber = verseID.split(`-`).shift().split(`.`).pop() + `-` + verseID.split(`-`).pop().split(`.`).pop();
        } else {
          verseNumber = verseID.split(`.`).pop();
        }
        return verseNumber;
      }

      /**
       * Gets query parameter from URL based on name
       * @param {string} name of query parameter
       * @returns {string} value of query parameter
       */
      function getParameterByName(name) {
        const url = window.location.href;
        name = name.replace(/[\[\]]/g, `\\$&`);
        const regex = new RegExp(`[?&]` + name + `(=([^&#]*)|&|#|$)`),
          results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return ``;
        return decodeURIComponent(results[2].replace(/\+/g, ` `));
      }

      /**
       * Loads page for new search
       */
      function searchButton(){
        const searchInput = document.querySelector(`#search-input`);
        window.location.href = `./search.html?&version=${bibleVersionID}&abbr=${abbreviation}&query=${searchInput.value}`;
      }
    </script>
<% end %>